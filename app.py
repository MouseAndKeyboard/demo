"""
app.py

A self-documenting Streamlit app that:
1) Loads 'example_dataset.csv' (generated by generate_data.py)
2) Explains the value of each feature (weighting, composite score, PCA, clusters, pinned articles) in context
3) Lets users configure weights for multiple numeric metrics to form a composite viability score
4) Performs PCA and K-means clustering on the numeric columns
5) Shows an interactive scatterplot for cohort exploration
6) Provides drilldown tables and a detail view
7) Allows pinning (saving) articles for comparison, with text-based guidance on usage
"""

import streamlit as st
import pandas as pd
import numpy as np
from sklearn.decomposition import PCA
from sklearn.cluster import KMeans
import plotly.express as px


# -----------------------------------------------
# Config & Data Loading
# -----------------------------------------------
st.set_page_config(page_title="Commercial Potential Explorer", layout="wide")

@st.cache_data
def load_data(csv_path="example_dataset.csv"):
    """Loads CSV data and returns a DataFrame."""
    df = pd.read_csv(csv_path)
    return df


# -----------------------------------------------
# Main App
# -----------------------------------------------
def main():
    # 1) Intro / Title
    st.title("Commercial Potential Explorer")
    st.markdown(
        """
        This application demonstrates how **rich research metrics** can guide decision-makers, 
        such as **corporate R&D managers**, **venture capitalists**, or **funding agencies**, 
        in pinpointing the most commercially promising research. 
        
        **Challenges** often include:
        - Drowning in thousands of research articles without a clear way to prioritize
        - Needing to quickly filter high-impact, **low-risk** innovations
        - Lacking a system to visualize how different innovations cluster together by risk/return
        - Wanting to compare or **pin** interesting articles for deeper analysis

        By leveraging:
        - **User-defined composite scoring** (a quick way to weigh what's important to you)
        - **2D visualization via PCA** (to see patterns at a glance)
        - **K-means clustering** (group similar articles for strategic "cohort" insights)
        - **Pinning** (to keep track of your favorites)

        ...you can quickly identify and drill into relevant research.

        ---
        """
    )

    # 2) Load data
    df = load_data()

    # Identify numeric columns to feed into PCA & clustering
    numeric_cols = [
        "tech_risk", "adoption_risk", "market_size", "trl", "ip_activity",
        "time_to_market", "disruption_potential", "cost_savings", "environment_impact",
        "citation_count", "feasibility_score", "breakthrough_potential",
        "innovation_novelty", "societal_impact", "industry_applicability",
        "readiness_index", "scalability", "public_funding_level"
    ]

    # -----------------------------------------------
    # Sidebar: Weighted Composite Score
    # -----------------------------------------------
    st.sidebar.header("1) Configure Composite Score")
    st.sidebar.markdown(
        """
        **Why do this?**  
        - Each user (e.g., R&D vs. VC) values metrics differently.  
        - Example: VCs might prioritize large **market_size** and **breakthrough_potential**,
          while corporate R&D might weigh **low tech_risk** and **high TRL** more heavily.
        
        Adjust these sliders to reflect your perspective, and we'll recalculate 
        a **Composite Score** for each article.
        """
    )
    w_tech_risk = st.sidebar.slider("Weight for (1 - tech_risk)", 0.0, 1.0, 0.3, 0.05)
    w_adoption_risk = st.sidebar.slider("Weight for (1 - adoption_risk)", 0.0, 1.0, 0.3, 0.05)
    w_market_size = st.sidebar.slider("Weight for market_size", 0.0, 1.0, 0.2, 0.05)
    w_trl = st.sidebar.slider("Weight for TRL", 0.0, 1.0, 0.2, 0.05)

    # Build composite_score
    df["composite_score"] = (
        (1 - df["tech_risk"]) * w_tech_risk +
        (1 - df["adoption_risk"]) * w_adoption_risk +
        (df["market_size"] / df["market_size"].max()) * w_market_size +
        (df["trl"] / 9.0) * w_trl  # TRL: 1..9
    )
    # Normalize to 0..1
    min_c, max_c = df["composite_score"].min(), df["composite_score"].max()
    df["composite_score"] = (df["composite_score"] - min_c) / (max_c - min_c + 1e-9)

    # -----------------------------------------------
    # PCA & Clustering
    # -----------------------------------------------
    st.subheader("2) PCA & K-Means for Cohort Identification")
    st.markdown(
        """
        **Why PCA & Clustering?**  
        - **PCA** reduces 18+ metrics into just 2D, so you can visually spot relationships 
          (e.g., a cluster of high-value, low-risk articles).  
        - **K-Means** automatically groups similar articles into 'cohorts' for you 
          to explore in a targeted manner.

        *(If you had to manually filter 18 columns, you'd drown in options. PCA & K-Means 
        make it easier to see the big picture.)*
        """
    )
    data_for_pca = df[numeric_cols].fillna(0).values

    pca = PCA(n_components=2, random_state=42)
    coords = pca.fit_transform(data_for_pca)
    df["pca_x"] = coords[:, 0]
    df["pca_y"] = coords[:, 1]

    kmeans = KMeans(n_clusters=5, random_state=42, n_init="auto")
    df["cluster"] = kmeans.fit_predict(data_for_pca)

    # -----------------------------------------------
    # Plot: 2D Scatter
    # -----------------------------------------------
    st.subheader("3) Visualize Articles in 2D")
    st.markdown(
        """
        **Instructions**  
        - Choose how to color the scatterplot: by **cluster** or by **composite_score**.  
        - Hover over any point to see an article's title and key metrics.  
        - This chart quickly reveals **“hot spots”**: clusters of articles with similar 
          risk/return profiles, or the highest composite scores (depending on your selection).

        *(A typical user flow is to color by cluster, notice an interesting region, and 
        then proceed to the “Explore Articles by Cluster” section to see them in detail.)*
        """
    )
    color_by = st.radio("Color by:", ["cluster", "composite_score"], horizontal=True)

    # Make a scatter plot using plotly
    fig = px.scatter(
        df,
        x="pca_x",
        y="pca_y",
        hover_data=["title", "composite_score", "cluster"],
        color=df[color_by] if color_by == "cluster" else df[color_by],
        color_continuous_scale="RdBu",
        title="PCA of Research Articles"
    )
    st.plotly_chart(fig, use_container_width=True)

    # -----------------------------------------------
    # Cohort Drilldown: Cluster Selection
    # -----------------------------------------------
    st.subheader("4) Drilldown by Cluster")
    st.markdown(
        """
        **Why Clusters?**  
        - Clusters help you quickly find *cohorts* of articles with similar metrics.  
        - You might discover a cluster with relatively **low risk** and **high TRL**, 
          perfect for immediate corporate deployment.  
        - Alternatively, you may find a cluster with **high disruption_potential** and 
          **large market_size**—ideal for a VC wanting maximum upside.

        Below, select a cluster to see the relevant subset of articles.
        """
    )
    all_clusters = sorted(df["cluster"].unique())
    chosen_cluster = st.selectbox("Select a cluster to explore:", all_clusters)
    cluster_mask = (df["cluster"] == chosen_cluster)
    cluster_df = df[cluster_mask].copy()

    st.write(f"**Cluster {chosen_cluster}** contains {len(cluster_df)} articles.")
    st.markdown(
        """
        Scroll the table below to see each article's high-level metrics. 
        You can sort columns if you like.
        """
    )
    show_cols = [
        "title", "composite_score", "tech_risk", "adoption_risk",
        "trl", "market_size"
    ]
    st.dataframe(cluster_df[show_cols].reset_index(drop=True))

    # -----------------------------------------------
    # Detail View
    # -----------------------------------------------
    st.subheader("5) Detailed View & Pinning")
    st.markdown(
        """
        **Select any article** from the dropdown to see more in-depth data (abstract, 
        composite score breakdown, etc.). If it seems interesting, **pin it** for easy 
        reference and comparison below.
        
        > **Use Case**: A corporate R&D manager might check if the time_to_market is 
        short enough, or if the cost_savings is significant. A VC might check the 
        disruption_potential or ip_activity. Each user can combine these insights to decide 
        which article is worth deeper due diligence.
        """
    )
    picked_title = st.selectbox("Pick an article for details:", cluster_df["title"])
    if picked_title:
        detail_row = cluster_df[cluster_df["title"] == picked_title].iloc[0]

        st.markdown(f"### {detail_row['title']}")
        st.write(f"**Abstract:** {detail_row['abstract']}")
        st.write("**Key Metrics:**")
        detail_dict = {
            "Composite Score": round(detail_row["composite_score"], 3),
            "Tech Risk": round(detail_row["tech_risk"], 3),
            "Adoption Risk": round(detail_row["adoption_risk"], 3),
            "Market Size": round(detail_row["market_size"], 2),
            "TRL": int(detail_row["trl"]),
            "IP Activity": detail_row["ip_activity"],
            "Disruption Potential": round(detail_row["disruption_potential"], 3),
            "Time to Market": detail_row["time_to_market"],
            # etc. you can show more columns as desired
        }
        st.write(detail_dict)

        # Session State for pinned articles
        if "pinned" not in st.session_state:
            st.session_state["pinned"] = set()

        if picked_title not in st.session_state["pinned"]:
            if st.button("Pin this article"):
                st.session_state["pinned"].add(picked_title)
        else:
            if st.button("Unpin this article"):
                st.session_state["pinned"].remove(picked_title)

    # -----------------------------------------------
    # Pinned Articles
    # -----------------------------------------------
    st.subheader("6) Pinned Articles")
    st.markdown(
        """
        **Why Pin?**  
        - As you explore multiple clusters, you might find several articles of interest.  
        - Pin them to avoid losing track. You can compare them side by side 
          (e.g., see how the composite score, TRL, or cost_savings vary).
        
        This section lists any articles you've pinned so far.
        """
    )
    pinned_titles = list(st.session_state.get("pinned", []))
    if pinned_titles:
        pinned_df = df[df["title"].isin(pinned_titles)].copy()
        st.write("These articles are currently pinned:")
        # Show the same columns or more as needed
        st.dataframe(pinned_df[show_cols])
    else:
        st.info("No articles pinned yet. Pin an article from the detail view above.")

    # -----------------------------------------------
    # Footer
    # -----------------------------------------------
    st.markdown(
        """
        ---
        **Final Thoughts**  
        - **Leverage the Composite Score** sliders in the sidebar to see how your 
          prioritization of different factors changes which cluster or articles rise to the top.
        - The **PCA chart** helps you see big-picture groupings, while **clustering** 
          quickly segments hundreds or thousands of articles.  
        - **Pinning** helps you keep track of interesting findings so you can export or 
          share them with colleagues.

        With this approach, you solve the overarching pain point of navigating a massive
        dataset of research metrics, focusing your attention on the most **commercially
        viable** innovations for your unique goals.
        """
    )

if __name__ == "__main__":
    main()

